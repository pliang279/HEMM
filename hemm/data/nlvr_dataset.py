# -*- coding: utf-8 -*-
"""NLVR_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/198krxMSLkciQMC7geqbPFBe13EQgfXEw
"""

from torch.utils.data import Dataset, DataLoader
import requests
from PIL import Image
from hemm.prompts.nlvr_prompt import nlvrprompt
import os
import json
from typing import Optional, Union, List
from PIL import Image
import requests
import torch
from datasets import load_dataset
from tqdm import tqdm
import random

from hemm.data.dataset import HEMMDatasetEvaluator
from hemm.metrics.metric import HEMMMetric

class NLVRDatasetEvaluator(HEMMDatasetEvaluator):
    def __init__(self,
                 dataset_dir = './train',
                 ):
        super().__init__()
        #self.dataset_key = 'newyorkercartoon'
        self.dataset_dir = dataset_dir
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self.prompt = nlvrprompt()

        self.image_dir = os.path.join(self.dataset_dir, 'nlvr/images/0')
        self.sentences = os.path.join(self.dataset_dir, 'train.json')
        #self.csv_path_suffix_1 = 'LilUCB'
        #self.csv_path_suffix_2 = 'lil-KLUCB'

    def load(self):
        shell_command('git clone https://github.com/lil-lab/nlvr.git')

    def get_prompt(self, text) -> str:
        prompt_text = self.prompt.format_prompt(text)
        return prompt_text

    def evaluate_dataset(self,
                         model,
                         metric,
                         ) -> None:
        self.load()
        self.metric = metric
        self.model = model
        predictions = []
        ground_truth = []
        for img in tqdm(os.listdir(self.image_dir), total=len(os.listdir(self.image_dir))):
            img_id = img.split('.png')
            img_path = os.path.join(self.image_dir, img)
            sentence=self.sentences['sentence']
            text = self.get_prompt(sentence)
            output = self.model.generate(text, img_path)
            answer = self.model.answer_extractor(output, self.dataset_key)
            label=self.sentences['label']
            if label.lower() == 'true':
                  ground_truth.append(1)
            else:
                  ground_truth.append(0)

            if answer.lower() == 'true':
                  predictions.append(1)
            else:
                  predictions.append(0)

        results = self.metric.compute(ground_truth, predictions)
        return results
